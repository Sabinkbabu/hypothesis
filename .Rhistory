str(beaver2)
# use the transform function to
# change the active to a factor
transformed_beaver_data <- transform(beaver2, activ = factor(activ, lables = c("no", "yes")))
# use the transform function to
# change the active to a factor
transformed_beaver_data <- transform(beaver2, activ = factor(activ, labels = c("no", "yes")))
library("lattice")
histogram(~temp | activ, data = transformed_beaver_data)
with(transformed_beaver_data,
qqplot(temp[activ = "yes"],
temp = [activ = "no"],
main = "Comparing two samples",
xlab = "active temp = yes",
ylab = "activ temp = no"))
with(transformed_beaver_data,
qqplot(temp[activ == "yes"],
temp = [activ == "no"],
main = "Comparing two samples",
xlab = "active temp = yes",
ylab = "activ temp = no"))
with(transformed_beaver_data,
qqplot(temp[activ == "yes"],
temp[activ == "no"],
main = "Comparing two samples",
xlab = "active temp = yes",
ylab = "activ temp = no"))
# using  a qq plot to check for normality
# qqnorm functions plots the sample
# against a normal distrubution
with(transformed_beaver_data,
qqnorm(temp[active == "no"],
main = "inactive data"))
# using  a qq plot to check for normality
# qqnorm functions plots the sample
# against a normal distrubution
with(transformed_beaver_data,
qqnorm(temp[activ == "no"],
main = "inactive data"))
# using  a qq plot to check for normality
# qqnorm functions plots the sample
# against a normal distrubution
with(transformed_beaver_data,
qqnorm(temp[activ == "no"],
main = "inactive data"),
qqline(temp[activ == "no"]))
# using  a qq plot to check for normality
# qqnorm functions plots the sample
# against a normal distrubution
with(transformed_beaver_data, {
qqnorm(temp[activ == "no"],
main = "inactive data"),
qqline(temp[activ == "no"])
})
# using  a qq plot to check for normality
# qqnorm functions plots the sample
# against a normal distrubution
with(transformed_beaver_data, {
qqnorm(temp[activ == "no"],
main = "inactive data")
qqline(temp[activ == "no"])
})
# Formal test of normality
# provided through the Shapiro-wilks test
normality_test <- shapiro.test(transformed_beaver_data$temp)
normality_test$p.value
# we can also check the normality of each variables
# using the tapply() function
with(transformed_beaver_data, tapply(temp, activ, shapiro.test))
str(beaver2)
# The beaver dataset contains data on body temp of 4 beavers
# every 10 mins for a day for demo purposes
# we want to examine the diffrence in average body temp
#during periods of activity to evaluate whether
# body temp is affected by activity
# activ should be a factor
# temp is numerical
# use the transform function to
# change the activ to a factor
transformed_beaver_data <- transform(beaver2, activ = factor(activ, labels = c("no", "yes")))
# before selecting the appropraite test, we need to check
# whether the data is normally distributed or not
# notes on balckboard for info
library("lattice")
# the histogram uses a 1 sided formula so we dont specify
# anything on the left side of ~
# and on the right side we specify which varibale is in the histogram
histogram(~temp | activ, data = transformed_beaver_data)
# Quantile-quantile plot allows us to
# examine if data is distributed normally
# compare the quantiles of both samples
# we use the square brackets to select the cases we want
with(transformed_beaver_data,
qqplot(temp[activ == "yes"],
temp[activ == "no"],
main = "Comparing two samples",
xlab = "active temp = yes",
ylab = "activ temp = no"))
# using  a qq plot to check for normality
# qqnorm functions plots the sample
# against a normal distrubution
with(transformed_beaver_data, {
qqnorm(temp[activ == "no"],
main = "inactive data")
qqline(temp[activ == "no"])
})
# Formal test of normality
# provided through the Shapiro-wilks test
normality_test <- shapiro.test(transformed_beaver_data$temp)
normality_test$p.value
# p value tells us the chnaces the sample
# comes from a normal distrubtion
# in this example, p value is less than 0.05
# so it is not normally distributed
# we can also check the normality of each variables
# using the tapply() function
with(transformed_beaver_data, tapply(temp, activ, shapiro.test))
# we can also check the normality of each variables
# using the tapply() function
with(transformed_beaver_data, tapply(temp, activ, shapiro.test))
normality_test$p.value
# we can also check the normality of each variables
# using the tapply() function
with(transformed_beaver_data, tapply(temp, activ, shapiro.test))
t.test(temp~activ, data = transformed_beaver_data)
# Using statistical methods to examine
# the relationships between variables of interest
?beavers
str(beaver2)
# The beaver dataset contains data on body temp of 4 beavers
# every 10 mins over a day for demo purposes
# We want to examine the difference in average body temp
# during periods of activity to evaluate whether
# body temperature is affected by activity
# First we need to ensure that data is in correct format
# Activ should be a factor
# Temp is numerical
# use the transform function to
# change activ to a factor
transformed_beaver_data <- transform(beaver2,
activ = factor(activ, labels = c("no", "yes")))
# Selecting the appropriate test
# We need to check whether the data is normally distributed or not
# See notes for more information
library("lattice")
# The histogram uses a 1 sided formula, so we
# dont specify anything on left side of ~
# and on right side we specify which variable is in the histogram
# ie temp.
# After the vertical line we show the factor by which the data
# is split ie "activ"
histogram(~temp | activ, data = transformed_beaver_data)
# Quantile-quantile plot allows us to
# data is distributed normally
# Compare the quantiles of both samples
# We use square brackets to select the cases we want
with(transformed_beaver_data,
qqplot(temp[activ == "yes"],
temp[activ == "no"],
main = "Comparing 2 samples",
xlab = "Active temp = yes",
ylab =  "Active temp = no"))
# Using a QQ plot to check for normality
# qqnorm function plots your sample
# against a normal distribution
with(transformed_beaver_data, {
qqnorm(temp[activ == "no"],
main = "Inactive")
})
# We can add normailty line
# to the plot to evaluate normality
# for active period = no
with(transformed_beaver_data, {
qqnorm(temp[activ == "no"],
main = "Inactive")
qqline(temp[activ == "no"])
})
# And we can change for active period
# = "yes"
with(transformed_beaver_data, {
qqnorm(temp[activ == "yes"],
main = "Active")
qqline(temp[activ == "yes"])
})
# Formal test of normality
# provided through widely used Shapiro-Wilks test
normality_test <- shapiro.test(transform.beaver$temp)
normality_test$p.value
# p-value tells us the chances that the sample comes
# from a normal distribution
# In this example, p-value is clearly lower than 0.05
# so not normally distributed
# We can check the normality in each variable
# using the tapply() function
with(transformed_beaver_data, tapply(temp, activ, shapiro.test))
# Comparing 2 samples - most widely used test
# eg comparing mileage in cars with manual and auto gearboxes
# R provides 2 tests for comparing numerical data
# the t-test and the Wilcoxon test
# Wilcoxon test does not require normally distributed data
# Carrying out a t-test
# Normally we can only carry out t-test on samples where variances
# are equal. Applying Welch variation allows for unequal variances
# In this test we are evaluating temp within groups determined by activ
t.test(temp ~ activ, data = transformed_beaver_data)
# t = test statistic
# df = degrees of freedom
# p = p value. Small p = means of both samples differ significantly
# Alternative hypothesis = what you can conclude if the p-value
# is lower than the limit for significance (<0.05)
# This shows us that the true mean of the difference is not 0
# ie that we reject the null hypothesis
# 95 percent confidence interval contains the difference between the means
# with 95% probability, in this case the difference between the means lies probably
# between 0.72 and 0.89
# We can also use two separate vectors for the samples you want to compare
# and pass both to the function
with(transformed_beaver_data,
t.test(temp[activ == "yes"],
temp[activ == "no"]))
# We can also use two separate vectors for the samples you want to compare
# and pass both to the function
with(transformed_beaver_data,
t.test(temp[activ == "yes"],
temp[activ == "no"]))
# We can use the Wilcox.text() function
# for data that deviates from normality
# In this test we get the test statistic (W)
# as well as the p value
# This test examines whether the centre of the data
# differs for both samples
wilcox.test(temp ~ activ, data = transformed_beaver_data)
survivors <- matrix(c(1781, 1443, 135, 47), ncol = 2)
colnames(survivors) <- c("survived", "died")
rownames(survivors) <- c("no seat belt", "seat belt")
survivors
# A proportion test can examine the probability
# that both proportions are the same
result_prop_test <- prop.test(survivors)
result_prop_test
# we 'll use the insectsprays dataset
str(InsectSprays)
InsectSprays
View(normality_test)
View(result_prop_test)
View(transformed_beaver_data)
# Optional test for normality
library(lattice)
histogram(~count | spray, data = InsectSprays)
# we 'll use the insectsprays dataset
str(InsectSprays)
# Optional test for normality
library(lattice)
histogram(~count | spray, data = InsectSprays)
with(InsectSprays, tapply(count, spray, shapiro.test))
# we want to model the means of variable count
# as a function of the variable spray
aov_model <- aov(count ~ spray, data = InsectSprays)
aov_model
summary(aov_model)
# models.table function allows us to examines the individual levels
# of factors. creates 2 tables
model.tables(aov_model, type = 'effects')
comparisons <- TukeyHSD(aov_model)
# model now contains list of where each element is named
# after one factor in the model
comparisons$spray['D-C']
# model now contains list of where each element is named
# after one factor in the model
comparisons$spray['D-C',]
comparisons$spray['F-C',]
comparisons$spray['F-E',]
comparisons$spray['C-F',]
comparisons$spray['F-C',]
plot(comparisons, las = 1)
install.packages('multcomp')
library(multcomp)
str(cholesterol)
attach(cholesterol)
aov_model <- aov(response ~ trt)
summary(aov_model)
detach(cholesterol)
install.packages('gplots')
library(gplots)
attach(cholesterol)
plotmeans(response ~ trt,
xlab = 'treatment',
ylab = 'response',
main = 'mean plot \n with 95% CI')
TukeyHSD(aov_model)
plot(TukeyHSD(aov_model), las = 2)
plotmeans(response ~ trt,
xlab = 'treatment',
ylab = 'response',
main = 'mean plot \n with 95% CI')
plot(TukeyHSD(aov_model), las = 2)
library(car)
qqplot(lm(response ~ trt), data = cholesterol, simulate = TRUE, main = 'Q-Q Plot', labels = FALSE)
qqPlot(lm(response ~ trt), data = cholesterol, simulate = TRUE, main = 'Q-Q Plot', labels = FALSE)
qqPlot(lm(response ~ trt, data = cholesterol), simulate = TRUE, main = 'Q-Q Plot', labels = FALSE)
# anova assumes that variances are equal across groups or samples
# the bartlett test can verify this assumption
bartlett.test(response ~ trt, data = cholesterol)
# anova is sensitive to outliers
library(car)
outlierTest(aov_model)
install.packages("pwr")
library(pwr)
power_information <- pwr.t.test(d = 0.8, sig.level = 0.05, power = 0.90,
type = "two.sample", alternative = "two.sided")
power_information
plot(power_information)
# Cohen describes effect size as "the degree to which the null hypothesis is false"
h <- ES.h(p1 = 0.75, p2 = 0.50)
# Cohen describes effect size as "the degree to which the null hypothesis is false"
h_value <- ES.h(p1 = 0.75, p2 = 0.50)
power_information <- pwr.p.test(h = h_value,
sig.level = .05,
power = 0.90,
alternative = "greater")
power_information
h_value <- ES.h(p1 = 0.75, p2 = 0.50)
power_information <- pwr.p.test(h = h_value,
sig.level = .05,
power = 0.90)
power_information
plot(power_information)
ES.h(test = "r", size = "medium")
cohen.ES(test = "r", size = "medium")
cohen.ES(test = "t", size = "medium")
